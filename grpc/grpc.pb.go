// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	UserName             string   `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Mess struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Mess) Reset()         { *m = Mess{} }
func (m *Mess) String() string { return proto.CompactTextString(m) }
func (*Mess) ProtoMessage()    {}
func (*Mess) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{1}
}

func (m *Mess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mess.Unmarshal(m, b)
}
func (m *Mess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mess.Marshal(b, m, deterministic)
}
func (m *Mess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mess.Merge(m, src)
}
func (m *Mess) XXX_Size() int {
	return xxx_messageInfo_Mess.Size(m)
}
func (m *Mess) XXX_DiscardUnknown() {
	xxx_messageInfo_Mess.DiscardUnknown(m)
}

var xxx_messageInfo_Mess proto.InternalMessageInfo

func (m *Mess) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Command struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain               string   `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	User                 string   `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_bedfbfc9b54e5600, []int{2}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Command) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Command) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*Mess)(nil), "api.Mess")
	proto.RegisterType((*Command)(nil), "api.Command")
}

func init() {
	proto.RegisterFile("grpc.proto", fileDescriptor_bedfbfc9b54e5600)
}

var fileDescriptor_bedfbfc9b54e5600 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3b, 0x4f, 0x03, 0x31,
	0x10, 0x84, 0xc9, 0xc5, 0xe4, 0xc8, 0x0a, 0x28, 0xb6, 0x40, 0x56, 0x1a, 0x22, 0x8b, 0x82, 0xea,
	0x0a, 0xe8, 0x69, 0x68, 0x28, 0x80, 0x22, 0x08, 0x5a, 0x64, 0xce, 0xab, 0xc8, 0x12, 0x7e, 0x60,
	0xfb, 0xe0, 0xef, 0x23, 0x3f, 0x0e, 0x94, 0x6e, 0xbe, 0x99, 0xb1, 0x35, 0x36, 0xc0, 0x3e, 0xf8,
	0x71, 0xf0, 0xc1, 0x25, 0x87, 0x4b, 0xe9, 0xb5, 0xb8, 0x03, 0xf6, 0x1a, 0x29, 0xe0, 0x06, 0x4e,
	0xa6, 0x48, 0xe1, 0x59, 0x1a, 0xe2, 0x8b, 0xed, 0xe2, 0x7a, 0xbd, 0xfb, 0xe3, 0x9c, 0x79, 0x19,
	0xe3, 0x8f, 0x0b, 0x8a, 0x77, 0x35, 0x9b, 0x59, 0x6c, 0x81, 0x3d, 0x51, 0x8c, 0xc8, 0xa1, 0x1f,
	0x9d, 0x4d, 0x64, 0x53, 0x3b, 0x3e, 0xa3, 0x78, 0x87, 0xfe, 0xde, 0x19, 0x23, 0xad, 0xaa, 0xa5,
	0x22, 0xff, 0x4b, 0x35, 0x39, 0x87, 0x4e, 0xfb, 0x76, 0x79, 0xa7, 0x3d, 0x5e, 0xc0, 0x4a, 0x39,
	0x23, 0xb5, 0xe5, 0xcb, 0xe2, 0x35, 0x42, 0x04, 0x96, 0x67, 0x71, 0x56, 0xdc, 0xa2, 0x6f, 0xde,
	0xe0, 0xec, 0x41, 0x5a, 0xf5, 0x49, 0x3b, 0xfa, 0x9a, 0x28, 0x26, 0xbc, 0x84, 0xe3, 0x47, 0xb7,
	0xd7, 0x16, 0xd7, 0x83, 0xf4, 0x7a, 0xc8, 0xef, 0xdb, 0x54, 0x99, 0xa7, 0x8a, 0x23, 0xbc, 0x82,
	0xfe, 0x85, 0xc2, 0xb7, 0x1e, 0x09, 0x4f, 0x8b, 0xdf, 0x06, 0x1e, 0xb4, 0x3e, 0x56, 0xe5, 0x9b,
	0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x84, 0x3f, 0x95, 0x95, 0x34, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HandleRequestClient is the client API for HandleRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HandleRequestClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Mess, error)
	Service(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Mess, error)
}

type handleRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewHandleRequestClient(cc grpc.ClientConnInterface) HandleRequestClient {
	return &handleRequestClient{cc}
}

func (c *handleRequestClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/api.HandleRequest/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handleRequestClient) Service(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Mess, error) {
	out := new(Mess)
	err := c.cc.Invoke(ctx, "/api.HandleRequest/Service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandleRequestServer is the server API for HandleRequest service.
type HandleRequestServer interface {
	Login(context.Context, *User) (*Mess, error)
	Service(context.Context, *Command) (*Mess, error)
}

// UnimplementedHandleRequestServer can be embedded to have forward compatible implementations.
type UnimplementedHandleRequestServer struct {
}

func (*UnimplementedHandleRequestServer) Login(ctx context.Context, req *User) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedHandleRequestServer) Service(ctx context.Context, req *Command) (*Mess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Service not implemented")
}

func RegisterHandleRequestServer(s *grpc.Server, srv HandleRequestServer) {
	s.RegisterService(&_HandleRequest_serviceDesc, srv)
}

func _HandleRequest_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleRequestServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HandleRequest/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleRequestServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandleRequest_Service_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandleRequestServer).Service(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HandleRequest/Service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandleRequestServer).Service(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandleRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.HandleRequest",
	HandlerType: (*HandleRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _HandleRequest_Login_Handler,
		},
		{
			MethodName: "Service",
			Handler:    _HandleRequest_Service_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
